#pragma checksum "C:\Users\FORMULATRIX\RiderProjects\Mine\SafeGeneral\ABB.Web\Modules\Shared\_ViewReport.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7968eaf5d98fa49f4ee57631f9a097c8dfa954bf"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Modules_Shared__ViewReport), @"mvc.1.0.view", @"/Modules/Shared/_ViewReport.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7968eaf5d98fa49f4ee57631f9a097c8dfa954bf", @"/Modules/Shared/_ViewReport.cshtml")]
    public class Modules_Shared__ViewReport : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<ABB.Web.Models.ReportViewModel>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7968eaf5d98fa49f4ee57631f9a097c8dfa954bf2800", async() => {
                WriteLiteral(@"
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>PDF.js Viewer</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            background-color: #f0f0f0;
        }
        #toolbar {
            background-color: #333;
            color: #fff;
            padding: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        #toolbar button, #toolbar input {
            padding: 5px 10px;
            cursor: pointer;
            background-color: #555;
            color: #fff;
            border: none;
            border-radius: 3px;
        }
        #toolbar input[type=""number""] {
            width: 50px;
        }
        #sidebar {
            width: 200px;
            background-color: #444;
        ");
                WriteLiteral(@"    overflow-y: auto;
            padding: 10px;
        }
        #sidebar .thumbnail {
            margin-bottom: 10px;
            cursor: pointer;
        }
        #sidebar .thumbnail img {
            width: 100%;
            border: 2px solid transparent;
        }
        #sidebar .thumbnail.active img {
            border-color: #007bff;
        }
        #viewerContainer {
            flex: 1;
            display: flex;
            overflow: auto;
            background-color: #666;
        }
        #pdfCanvas {
            margin: auto;
            display: block;
            background-color: #fff;
        }
        ");
                WriteLiteral(@"@media print {
          #toolbar, #sidebar {
            display: none;
          }
          #viewerContainer {
            overflow: visible;
          }
          #pdfCanvas {
            margin: 0;
            width: 100%;
            height: 100%;
          }
          /* Hide the title and timestamp (if there's any) */
          title {
            display: none;
          }
          /* Hide the footer with timestamp */
          body:before {
            content: '';
            display: none;
          }
      }
    </style>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7968eaf5d98fa49f4ee57631f9a097c8dfa954bf6093", async() => {
                WriteLiteral(@"
    <div id=""toolbar"">
        <button onclick=""prevPage()"">Previous</button>
        <span>Page: <span id=""pageNum""></span> / <span id=""pageCount""></span></span>
        <button onclick=""nextPage()"">Next</button>
        <button onclick=""zoomIn()"">Zoom In</button>
        <button onclick=""zoomOut()"">Zoom Out</button>
        <input type=""number"" id=""scaleInput"" value=""1.5"" min=""0.5"" max=""3"" step=""0.1"" onchange=""changeScale()"">
        <button onclick=""printPdf()"">Print</button>
        <button onclick=""downloadPdf()"">Download</button>
    </div>
    <div id=""viewerContainer"">
        <div id=""sidebar"">
            <!-- Thumbnails will be populated here -->
        </div>
        <canvas id=""pdfCanvas""></canvas>
    </div>

    <script src=""https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js""></script>
    <script>
        let pdfDoc = null;
        let pageNum = 1;
        let pageRendering = false;
        let pageNumPending = null;
        let scale = 1.5;
        co");
                WriteLiteral(@"nst canvas = document.getElementById('pdfCanvas');
        const ctx = canvas.getContext('2d');
        let currentMatchIndex = 0;

        function renderPage(num) {
            pageRendering = true;
            pdfDoc.getPage(num).then(function(page) {
                const viewport = page.getViewport({ scale: scale });
                canvas.height = viewport.height;
                canvas.width = viewport.width;

                const renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };
                const renderTask = page.render(renderContext);

                renderTask.promise.then(function() {
                    pageRendering = false;
                    if (pageNumPending !== null) {
                        renderPage(pageNumPending);
                        pageNumPending = null;
                    }
                });
            }).catch(function(error) {
                console.error(""Error rendering pa");
                WriteLiteral(@"ge:"", error);
            });

            document.getElementById('pageNum').textContent = num;
            updateThumbnails(num);
        }

        function queueRenderPage(num) {
            if (pageRendering) {
                pageNumPending = num;
            } else {
                renderPage(num);
            }
        }

        function prevPage() {
            if (pageNum <= 1) return;
            pageNum--;
            queueRenderPage(pageNum);
        }

        function nextPage() {
            if (pageNum >= pdfDoc.numPages) return;
            pageNum++;
            queueRenderPage(pageNum);
        }

        function zoomIn() {
            scale += 0.1;
            document.getElementById('scaleInput').value = scale.toFixed(1);
            queueRenderPage(pageNum);
        }

        function zoomOut() {
            scale -= 0.1;
            document.getElementById('scaleInput').value = scale.toFixed(1);
            queueRenderPage(pageNum);
        }
");
                WriteLiteral(@"
        function changeScale() {
            scale = parseFloat(document.getElementById('scaleInput').value);
            queueRenderPage(pageNum);
        }

        function printPdf() {
            // Hide toolbar and sidebar before printing
            document.getElementById('toolbar').style.display = 'none';
            document.getElementById('sidebar').style.display = 'none';

            // Trigger the browser's print dialog
            window.print();

            // Restore toolbar and sidebar after printing
            setTimeout(() => {
                document.getElementById('toolbar').style.display = 'flex';
                document.getElementById('sidebar').style.display = 'block';
            }, 500);
        }

        function downloadPdf() {
            const link = document.createElement('a');
            link.href = pdfDoc.loadingTask.doc.baseUrl;
            link.download = 'document.pdf';
            link.click();
        }

        function updateThumbnails");
                WriteLiteral(@"(currentPage) {
            const sidebar = document.getElementById('sidebar');
            sidebar.innerHTML = '';
            for (let i = 1; i <= pdfDoc.numPages; i++) {
                const thumbnail = document.createElement('div');
                thumbnail.className = `thumbnail ${i === currentPage ? 'active' : ''}`;
                thumbnail.onclick = () => {
                    pageNum = i;
                    queueRenderPage(pageNum);
                };
                pdfDoc.getPage(i).then(function(page) {
                    const viewport = page.getViewport({ scale: 0.2 });
                    const thumbnailCanvas = document.createElement('canvas');
                    const thumbnailCtx = thumbnailCanvas.getContext('2d');
                    thumbnailCanvas.height = viewport.height;
                    thumbnailCanvas.width = viewport.width;
                    page.render({ canvasContext: thumbnailCtx, viewport: viewport });
                    thumbnail.appendChild(thumbnail");
                WriteLiteral(@"Canvas);
                });
                sidebar.appendChild(thumbnail);
            }
        }

        function loadPdf(url) {
            pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
                pdfDoc = pdfDoc_;
                document.getElementById('pageCount').textContent = pdfDoc.numPages;
                renderPage(pageNum);
            }).catch(function(error) {
                console.error(""Error loading PDF:"", error);
                alert(""Failed to load PDF. Please check the URL and try again."");
            });
        }

        // Load the PDF file
        loadPdf(""https://ontheline.trincoll.edu/images/bookdown/sample-local-pdf.pdf"");
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<ABB.Web.Models.ReportViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
